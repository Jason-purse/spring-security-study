spring:
  security:
    oauth2:
      client:
        registration:
          github:
            # 最关键的是,我们需要 client-id
            # client-secret
            # redirectUri ..
            client-id: f543da40b61539ad21b9
            client-secret: d49fa1d635ecb502c6756096e5903ab5e1c9d976
            redirectUri: "{baseUrl}/api/auth/oauth2/login/code/{registrationId}"
          google:
            client-id: 301947503177-emqplbufs101qvkhbplmpphhj9m4g9tu.apps.googleusercontent.com
            client-secret: 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
            # resource owner 其实就是 localhost:8081/api/auth/oauth2/login/code/google ....
            redirectUri: "{baseUrl}/api/auth/oauth2/login/code/{registrationId}"
          mlnlco:
            client-id: messaging-client
            # 这里的密码 不应该有任何前缀 ...
            client-secret: "secret"
            redirectUri: "{baseScheme}://127.0.0.1{basePort}/api/auth/oauth2/login/code/{registrationId}"
            client-name: mlnlco-messaging-client
            scope:
              - message.read
              - profile
              - openid
        provider:
          mlnlco:
#            authorizationUri: http://localhost:8080/oauth2/authorize
#            tokenUri: http://localhost:8080/oauth2/token
##            userInfoUri: http://localhost:8080/userinfo
#            userNameAttribute: id
#            jwkSetUri: http://localhost:8080/oauth2/jwks
            issuerUri: http://localhost:8080


server:
  port: 8081
logging:
  level:
    org.springframework.security.web: debug